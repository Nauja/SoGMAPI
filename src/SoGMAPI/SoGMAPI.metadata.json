{
  /**
     * Metadata about some SMAPI mods used in compatibility, update, and dependency checks. This
     * field shouldn't be edited by players in most cases.
     *
     *
     * Standard fields
     * ===============
     * The predefined fields are documented below (only 'ID' is required). Each entry's key is the
     * default display name for the mod if one isn't available (e.g. in dependency checks).
     *
     *   - ID: the mod's latest unique ID (if any).
     *
     *   - FormerIDs: uniquely identifies the mod across multiple versions, and supports matching
     *     other fields if no ID was specified. This doesn't include the latest ID, if any. Multiple
     *     variants can be separated with '|'.
     *
     *   - SuppressWarnings: the mod warnings to suppress, even if they'd normally be shown. This
     *     should match the ModWarning enum.
     *
     *
     * Versioned metadata
     * ==================
     * Each record can also specify extra metadata using the field keys below.
     *
     * Each key consists of a field name prefixed with any combination of version range and 'Default',
     * separated by pipes (whitespace trimmed). For example, 'UpdateKey' will always override,
     * 'Default | UpdateKey' will only override if the mod has no update keys, and
     * '~1.1 | Default | Name' will do the same up to version 1.1.
     *
     * The version format is 'min~max' (where either side can be blank for unbounded), or a single
     * version number.
     *
     * These are the valid field names:
     *
     *   - UpdateKey: the update key to set in the mod's manifest. This is used to enable update
     *     checks for older mods that haven't been updated to use it yet.
     *
     *   - Status: overrides compatibility checks. The possible values are Obsolete (SMAPI won't load
     *     it because the mod should no longer be used), AssumeBroken (SMAPI won't load it because
     *     the specified version isn't compatible), or AssumeCompatible (SMAPI will try to load it
     *     even if it detects incompatible code).
     *
     *     Note that this shouldn't be set to 'AssumeBroken' if SMAPI can detect the incompatibility
     *     automatically, since that hides the details from trace logs.
     *
     *   - StatusReasonPhrase: a message to show to the player explaining why the mod can't be loaded
     *     (if applicable). If blank, will default to a generic not-compatible message.
     *
     *   - StatusReasonDetails: a technical reason shown in TRACE logs, indicating why the status
     *     was overridden. If not provided, it defaults to the StatusReasonPhrase or 'no reason given'.
     */
  "ModData": {}
}
